{"version":3,"sources":["components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","React","Component","App","state","users","startDate","Date","handleChange","date","setState","sendData","fetch","method","headers","body","JSON","stringify","dateToSend","console","log","then","res","json","this","map","user","key","username","selected","onChange","onSelect","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0MAmCeA,G,6LA/BP,OAAO,yBAAKC,UAAU,iDAClB,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,UACA,4BACID,UAAU,iBACVE,KAAK,SACLC,cAAY,WACZC,cAAY,0BACZC,gBAAc,yBACdC,gBAAc,QACdC,aAAW,qBACX,0BAAMP,UAAU,yBAIpB,yBAAKA,UAAU,2BAA2BQ,GAAG,0BACzC,wBAAIR,UAAU,sBAEV,wBAAIA,UAAU,mBACV,uBAAGA,UAAU,WAAWC,KAAK,KAA7B,QAAsC,0BAAMD,UAAU,WAAhB,eAG1C,wBAAIA,UAAU,YACV,uBAAGA,UAAU,WAAWC,KAAK,KAA7B,mB,GAxBHQ,IAAMC,Y,iBC+DZC,G,iNAtDbC,MAAQ,CAACC,MAAO,GACPC,UAAW,IAAIC,M,EAGvBC,aAAe,SAAAC,GACd,EAAKC,SAAS,CACZJ,UAAWG,K,EAIfE,SAAW,SAAAF,GAETG,MAAM,gCAAiC,CACrCC,OAAQ,OACNC,QAAS,CACP,OAAU,mBACV,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAEnBC,WAAYT,MAKpBU,QAAQC,IAAI,EAAKhB,MAAME,Y,mFAGF,IAAD,OAClBM,MAAM,UACHS,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAhB,GAAK,OAAI,EAAKK,SAAS,CAAEL,c,+BAIjC,OACE,yBAAKb,UAAU,OACb,kBAAC,EAAD,MADF,IAEE,qCACCgC,KAAKpB,MAAMC,MAAMoB,IAAI,SAAAC,GAAI,OACxB,yBAAKC,IAAKD,EAAK1B,IAAK0B,EAAKE,YAG7B,kBAAC,IAAD,CACEC,SAAUL,KAAKpB,MAAME,UACrBwB,SAAUN,KAAKhB,aACfuB,SAAUP,KAAKb,gB,GA/CLT,cCEE8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC,gB","file":"static/js/main.3a8488bc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Navbar extends React.Component {\r\n    render() {\r\n        return <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n            <a className=\"navbar-brand\" href=\"#\">Navbar</a>\r\n            <button \r\n                className=\"navbar-toggler\" \r\n                type=\"button\" \r\n                data-toggle=\"collapse\" \r\n                data-target=\"#navbarSupportedContent\" \r\n                aria-controls=\"navbarSupportedContent\" \r\n                aria-expanded=\"false\" \r\n                aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n\r\n            {/** Navbar Items */}\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                <ul className=\"navbar-nav mr-auto\">\r\n                    {/**Home */}\r\n                    <li className=\"nav-item active\">\r\n                        <a className=\"nav-link\" href=\"#\">Home <span className=\"sr-only\">(current)</span></a>\r\n                    </li>\r\n                    {/**Link */}\r\n                    <li className=\"nav-item\">\r\n                        <a className=\"nav-link\" href=\"#\">Reserve</a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            {/**End Navbar Items */}\r\n        </nav>\r\n    }\r\n}\r\n\r\nexport default Navbar;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Navbar from './components/Navbar.js';\r\n\r\n// For Calender\r\nimport DatePicker from \"react-datepicker\";\r\n \r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nclass App extends Component {\r\n  state = {users: [],\r\n           startDate: new Date()\r\n           };\r\n  \r\n   handleChange = date => {\r\n    this.setState({\r\n      startDate: date\r\n    });\r\n  };\r\n\r\n  sendData = date => {\r\n\r\n    fetch('http://localhost:3000/reserve', {\r\n      method: 'POST',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          // sending the current date selected\r\n          dateToSend: date\r\n          \r\n          \r\n        })\r\n  })\r\n  console.log(this.state.startDate)\r\n}\r\n\r\n  componentDidMount() {\r\n    fetch('/users')\r\n      .then(res => res.json())\r\n      .then(users => this.setState({ users }));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Navbar /> {/**Navbar Here */}\r\n        <h1>Users</h1>\r\n        {this.state.users.map(user =>\r\n          <div key={user.id}>{user.username}</div>\r\n        )}\r\n\r\n      <DatePicker\r\n        selected={this.state.startDate}\r\n        onChange={this.handleChange}\r\n        onSelect={this.sendData}\r\n        \r\n      />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}